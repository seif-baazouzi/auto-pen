import random
import datetime
from urllib.parse import urljoin

from .url import host, validPath

###########################################################################
###########################################################################

def randomData(fieldType):
  fields = {
    "tel"            : random.randint(10000000, 99999999),
    "url"            : "https://www.sample.com",
    "date"           : datetime.datetime.now().strftime("%Y-%m-%d"),
    "time"           : datetime.datetime.now().strftime("%M:%H:%S"),
    "email"          : "user@mail.com",
    "color"          : "#000000",
    "month"          : random.randint(1, 12),
    "number"         : random.randint(10000000, 99999999),
    "checkbox"       : "on",
    "datetime-local" : datetime.datetime.now().strftime("%Y-%m-%d %M:%H:%S"),
  }

  try:
    data = fields[fieldType]
    return data if data else hex(random.randint(10000000, 99999999))[2:]
  except:
    return hex(random.randint(10000000, 99999999))[2:]

###########################################################################
###########################################################################

class Form:
  def __init__(self, url, method, action, fields):
    self.url = url
    self.method = method.upper()
    self.action = action
    self.fields = fields
    self.fields.sort()

  def inject(self, fieldIndex, payload):
    data = {}
    for index in range(len(self.fields)):
      name, fieldType = self.fields[index]
      if index == fieldIndex:
        data[name] = payload
      else:
        data[name] = randomData(fieldType)

    return data

  def __eq__(self, other):
    if self.method != other.method or self.action != other.action or len(self.fields) != len(other.fields):
      return False

    for index in range(len(self.fields)):
      if self.fields[index][0] != other.fields[index][0]:
        return False
    else:
      return True
  
  def __repr__(self):
    fields = ", ".join([ name for name, _ in self.fields ])
    return f"{self.method} {self.action} [ {fields} ]"

###########################################################################
###########################################################################

def addField(inp, fields, defaultType="text"):
  name = inp.get("name")
  if not name:
    return None
  
  fieldType = inp.get("type")
  if not fieldType:
    fieldType = defaultType
  elif fieldType.lower() in [ "reset", "submit" ]:
    return None
  
  fields.append((name, fieldType))

###########################################################################
###########################################################################

def getMethod(form):
  method = form.get("method")
  if not method:
    method = "GET"
  
  return method

###########################################################################
###########################################################################

def getAction(url, form):
  action = form.get("action")
  if not action:
    return url.sample()
    
  urlHost = host(url)
  if validPath(urlHost, action):
    return urljoin(url.sample(), action)
  
  return None

###########################################################################
###########################################################################

def getForm(url, form):
  action = getAction(url, form)
  if action == None:
    return None

  fields = []
  for inp in form.find_all("input"):
    addField(inp, fields)

  for textarea in form.find_all("textarea"):
    addField(textarea, fields, "textarea")
    
  for select in form.find_all("select"):
    addField(select, fields, "select")

  method = getMethod(form)

  return Form(url, method, action, fields)

###########################################################################
###########################################################################

def isUniqForm(form, uniqForms):
  for uniqForm in uniqForms:
    if form == uniqForm:
      return False
  else:
    return True
