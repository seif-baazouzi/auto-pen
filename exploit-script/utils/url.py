import random
import requests
from urllib.parse import urlparse, parse_qsl, quote

###########################################################################
###########################################################################

def joinUrl(url, path=None, params=None, query=None, fragment=None):
  finalUrl = f"{url.scheme}://{url.netloc}"
  
  if path: finalUrl += path
  elif url.path: finalUrl += url.path
  else: finalUrl += "/"

  if params: finalUrl += ";" + params
  elif url.params: finalUrl += ";" + url.params
  
  if query: finalUrl += "?" + query
  elif url.query: finalUrl += "?" + url.query

  if fragment: finalUrl += "#" + fragment
  elif url.fragment: finalUrl += "#" + url.fragment

  return finalUrl

###########################################################################
###########################################################################

def joinPath(index, pathList, payload):
  pathCopy = pathList.copy()
  pathCopy[index] = quote(payload)

  return "/" + "/".join(pathCopy)

###########################################################################
###########################################################################

class Path:
  def __init__(self, pathList, paramsIndexes):
    self.pathList = pathList
    self.paramsIndexes = paramsIndexes

  def inject(self, index, payload):
    return joinPath(index, self.pathList, payload)

  def __repr__(self):
    path = ""
    for index in range(len(self.pathList)):
      if index in self.paramsIndexes:
        path += f"/<#{index}>"
      elif self.pathList[index] != "":
        path += f"/{self.pathList[index]}"
    
    return path

  def __eq__(self, other):
    return str(self) == str(other)

###########################################################################
###########################################################################

def getPathParams(url):
  paramsIndexes = []
  pathList = url.path.split("/")[1:]
  payload = str(random.randint(10000000, 99999999))

  for index in range(len(pathList)):
    path = joinPath(index, pathList, payload)
    currentUrl = joinUrl(url, path=path)
    if requests.get(currentUrl).status_code != 404:
      paramsIndexes.append(index)
  
  return Path(pathList, paramsIndexes)

###########################################################################
###########################################################################

def joinQuery(index, paramsList, payload):
  query = []
  for i in range(len(paramsList)):
    key, value = paramsList[i]
    if i == index:
      query.append(f"{key}={quote(payload)}")
    elif value:
      query.append(f"{key}={value}")
    else:
      query.append(key)
  
  return "&".join(query)

###########################################################################
###########################################################################

class Query:
  def __init__(self, url):
    self.paramsList = parse_qsl(url.query)
    self.paramsList.sort()

  def inject(self, index, payload):
    return joinQuery(index, self.paramsList, payload)

  def __eq__(self, other):
    if len(self.paramsList) != len(other.paramsList):
      return False
    
    for index in range(len(self.paramsList)):
      if self.paramsList[index][0] != other.paramsList[index][0]:
        return False
    else:
      return True

###########################################################################
###########################################################################

class Url:
  def __init__(self, url, is404=False):
    self.parsed = urlparse(url)

    if is404 != False:
      self.path = Path([ "random", "404", "page", "for", "testing" ], [3])
      self.query = Query(self.parsed)
    else:
      self.path = getPathParams(self.parsed)
      self.query = Query(self.parsed)

  def injectPath(self, index, payload):
    return joinUrl(self.parsed, path=self.path.inject(index, payload))
    
  def injectQuery(self, index, payload):
    return joinUrl(self.parsed, query=self.query.inject(index, payload))
  
  def sample(self):
    return self.parsed.geturl()
  
  def __repr__(self):
    return joinUrl(self.parsed, path=str(self.path))
  
  def __eq__(self, other):
    return self.path == other.path \
      and self.query == other.query \
      and self.parsed.fragment == other.parsed.fragment

###########################################################################
###########################################################################

def isUniqUrl(url, uniqUrls):
  for uniqUrl in uniqUrls:
    if url == uniqUrl:
      return False
  else:
    return True

###########################################################################
###########################################################################

def host(url):
  return "{uri.scheme}://{uri.netloc}".format(uri=url.parsed)

###########################################################################
###########################################################################

def validPath(urlHost, path):
  if (path.startswith("http") and not path.startswith(urlHost)) \
    or path.startswith("tel:") \
    or path.startswith("mailto:") \
    or path.startswith("javascript:"): return False
  
  return True
