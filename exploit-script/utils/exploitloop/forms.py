import requests
from urllib.parse import urlparse

from .getheaders import getHeaders
from utils.threadingloop import threadingLoop

###########################################################################
###########################################################################

def joinData(data):
  res = ""
  for name, value in data.items():
    res += f"&{name}={value.replace('&', '%26')}"
  
  return res[1:]

###########################################################################
###########################################################################

def getUrl(url, data):
  url = urlparse(url)
  url = url._replace(query=joinData(data))
  return url.geturl()

###########################################################################
###########################################################################

class FormExploitResult:
  def __init__(self, form, data, field, payload, headers, cookies, fieldIndex):
    self.form = form
    self.data = data
    self.field = field
    self.payload = payload
    self.headers = headers
    self.cookies = cookies
    self.fieldIndex = fieldIndex

  def curl(self):
    if self.form.method in [ "POST", "PUT", "PATCH", "DELETE" ]:
      return f"curl '{self.form.action}' -X {self.form.method} -d '{joinData(self.data)}'"
    
    return f"curl '{getUrl(self.form.action, self.data)}'"

###########################################################################
###########################################################################

def getRequest(url, method, headers, cookies, data):
  if method in [ "POST", "PUT", "PATCH", "DELETE" ]:
    return requests.request(method, url=url, headers=headers, cookies=cookies, data=data)
  
  url = getUrl(url, data)
  return requests.get(url, headers=headers, cookies=cookies)

###########################################################################
###########################################################################

def exploitFormsFunc(form, cookies, payloads, results, checkResponseFunction, foundExploitCallback):
  for fieldIndex in range(len(form.fields)):
    for payload in payloads:
      data = form.inject(fieldIndex, payload)
      headers = getHeaders()

      res = getRequest(form.action, form.method, headers, cookies, data)
      
      if checkResponseFunction(res):
        fieldName = form.fields[fieldIndex][0]
        exploitResult = FormExploitResult(form, data, fieldName, payload, headers, cookies, fieldIndex)
        foundExploitCallback(exploitResult, "form")
        results.append(exploitResult)
        break

###########################################################################
###########################################################################

def exploitForms(forms, cookies, payloads, checkResponseFunction, foundExploitCallback):
  results = []
  threadingLoop(
    exploitFormsFunc,
    forms,
    (cookies, payloads, results, checkResponseFunction, foundExploitCallback)
  )

  return results
