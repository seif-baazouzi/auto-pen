import requests
from urllib.parse import quote

from .getheaders import getHeaders
from utils.threadingloop import threadingLoop

###########################################################################
###########################################################################

class UrlExploitResult:
  def __init__(self, kind, urlWithPayload, url, param, payload, headers, cookies):
    self.url = url
    self.kind = kind
    self.param = param
    self.payload = payload
    self.headers = headers
    self.cookies = cookies
    self.urlWithPayload = urlWithPayload

  def getParamName(self):
    return f"<#{self.param}>" if self.kind == "path" else self.param
  
  def curl(self):
    # TODO: add cookies
    return f"curl '{self.urlWithPayload}'"

###########################################################################
###########################################################################

def exploitPathParamsFunc(url, cookies, payloads, results, checkResponseFunction, foundExploitCallback):
  for paramIdnex in url.path.paramsIndexes:
    for payload in payloads:
      currentUrl = url.injectPath(paramIdnex, payload)
      headers = getHeaders()

      res = requests.get(currentUrl, headers=headers, cookies=cookies)
      if checkResponseFunction(res):
        exploitResult = UrlExploitResult("path", currentUrl, url, paramIdnex, payload, headers, cookies)
        foundExploitCallback(exploitResult, "url")
        results.append(exploitResult)
        break

###########################################################################
###########################################################################

def exploitPathParams(urls, cookies, payloads, checkResponseFunction, foundExploitCallback):
  results = []
  threadingLoop(
    exploitPathParamsFunc,
    urls,
    (cookies, payloads, results, checkResponseFunction, foundExploitCallback)
  )

  return results

###########################################################################
###########################################################################

def exploitQueryParamsFunc(url, cookies, payloads, results, checkResponseFunction, foundExploitCallback):
  for paramIdnex in range(len(url.query.paramsList)):
    for payload in payloads:
      headers = getHeaders()
      currentUrl = url.injectQuery(paramIdnex, payload)

      res = requests.get(currentUrl, headers=headers, cookies=cookies)
      if checkResponseFunction(res):
        paramName = url.query.paramsList[paramIdnex][0]
        exploitResult = UrlExploitResult("query", currentUrl, url, paramName, payload, headers, cookies)
        foundExploitCallback(exploitResult, "url")
        results.append(exploitResult)
        break

###########################################################################
###########################################################################

def exploitQueryParams(urls, cookies, payloads, checkResponseFunction, foundExploitCallback):
  results = []
  threadingLoop(
    exploitQueryParamsFunc,
    urls,
    (cookies, payloads, results, checkResponseFunction, foundExploitCallback)
  )

  return results
