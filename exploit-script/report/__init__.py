from log import info, bold
from .cvss import cvssReport
from .nmap import nmapReport
from .sqli import sqliReport
from .forms import formsReport
from .listreport import listReport
from .reportPrivEsc import reportPrivEsc
from .reportTemplate import reportTemplate
from .reportHardening import reportHardening

def generateReport(urls, forms, results):
  report = []
  
  info(bold("Generating report"))
  
  if "nmapTechnologies" in results:
    report.append(nmapReport())
    report.append(
      listReport(
        "Technologies found by nmap",
        results["nmapTechnologies"],
        "We did not find any technologies"
      )
    )
  
  if "webtechtechnologies" in results:
    report.append(
      listReport(
        "Technologies found by webtech",
        results["webtechtechnologies"],
        "We did not find any technologies"
      )
    )
  
  if "cvss" in results:
    report.append(cvssReport(results["cvss"]))
  
  if "waf" in results:
    report.append(
      listReport("WAF check", results["waf"], "No WAF detected")
    )

  if "cors" in results:
    report.append(
      listReport("CORS check", results["cors"], "No misconfigurations found")
    )
  
  report.append("# Scraping\n")
  report.append(listReport("Urls list", urls, "We did not find any urls", h2=True))
  report.append(formsReport(forms))

  if "backups" in results:
    report.append(
      listReport(
        "Possible backups files",
        results["backups"],
        "We did not find any backups"
      )
    )

  if "lfi" in results \
    or "xss" in results \
    or "sqli" in results \
    or "cmdInjection" in results \
    or "tmpInjection" in results: report.append("# Exploit\n")

  if "lfi" in results:
    report.append(reportTemplate("LFI", results["lfi"]))
  
  if "xss" in results:
    report.append(reportTemplate("XSS", results["xss"]))
  
  if "sqli" in results:
    report.append(sqliReport(results["sqli"]))
  
  if "cmdInjection" in results:
    reflected, blind = results["cmdInjection"]
    report.append(reportTemplate("Refelected Command Injection", reflected))
    report.append(reportTemplate("Blind Command Injection", blind))
  
  if "tmpInjection" in results:
    report.append(reportTemplate("Template Injection", results["tmpInjection"]))

  if "privEsc" in results:
    report.append(reportPrivEsc(results["privEsc"]))

  if "hardening" in results and len(results["hardening"]) != 0:
    report.append(reportHardening(results["hardening"]))
  
  info(bold("Done!"))

  return "\n".join(report)
