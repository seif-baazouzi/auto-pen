from utils.parselist import parseList
from utils.exploitloop import exploitLoop
from log import impr, bold, red, warn, info

###########################################################################
###########################################################################

def checkResponseFunction(res):
  return "root:x:0:0" in res.text

###########################################################################
###########################################################################

def foundExploitCallback(res, kind):
  if kind == "url":
    impr(
      f"In the url {res.urlWithPayload} the {res.kind} "
      f"param `{bold(res.getParamName())}` {red(bold('is vulnerable'))}"
    )
  else:
    impr(
      f"In the url {res.form.url} the form {res.form.method} {res.form.action} "
      f"field `{bold(res.field)}` {red(bold('is vulnerable'))} with payload {bold(res.payload)}"
    )

###########################################################################
###########################################################################

def lfiModule(urls, forms, cookies):
  info(bold("Testing for LFI"))
  
  payloads = parseList("lfi.txt")
  results  = exploitLoop(urls, forms, cookies, payloads, checkResponseFunction, foundExploitCallback)
  
  if len(results) == 0:
    warn("No LFI found")

  return results
