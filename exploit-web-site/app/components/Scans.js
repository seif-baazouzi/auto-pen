import { useRouter } from "next/router"
import { useEffect, useState } from "react"
import AddScan from "../components/AddScan"
import NavBar from "../components/NavBar"
import ScansList from "../components/ScansList"
import ajax from "../utils/ajax"
import { parseCookies } from "../utils/cookies"

import Animation from "./Animation"

export default function Scans({ scans, running }) {
  const router = useRouter()
  const [show, setShow] = useState(false)
    
  const deleteScan = async (id) => {
    const { token } = parseCookies(document.cookie)
    await ajax.del(`/api/v1/scans/${id}`, { token })
    
    router.replace(router.asPath)
  }
  
  useEffect(() => {
    const int = setInterval(() => router.replace(router.asPath), 10*1000)
    return () => clearInterval(int)
  }, [])
  
  return (
    <>
      <NavBar />
      <Animation>
        <div className={`container ${scans.length === 0 ? "center" : ""}`}>
          {
            scans.length ?
              <div>
                <div className="flex">
                  <h2 style={{ flex: 2 }}>{running && "Running"} Scans list</h2>
                  <button
                    className="float"
                    onClick={() => setShow(true)}
                    >add scan
                  </button>
                </div>
                <ScansList scans={scans} deleteScan={deleteScan} />
              </div>
            :
              <div>
                <h1 className="msg">
                  {running ?
                    "All Done!"
                      :
                    "There is no scans yet!"
                  }
                  </h1>
                <button
                  className="float"
                  onClick={() => setShow(true)}
                  >add scan
                </button>
              </div>
          }
        </div>
        <AddScan showState={[show, setShow]} />
      </Animation>
    </>
  )
}

export async function getScans(context, running) {
  const cookies = parseCookies(context.req.headers.cookie)
      
  if(!cookies.token) {
    return {
      redirect: { permanent: false, destination: "/login" }
    }
  }

  const res = await ajax.get(`/api/v1/scans${running ? "?running" : ""}`, { token: cookies.token })
  
  if(res.message === "invalid-token") {
    return {
      redirect: { permanent: false, destination: "/login" }
    }
  }
  
  return {
    props: { scans: res.scans }
  }
}
